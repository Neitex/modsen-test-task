openapi: 3.0.3
info:
  title: User and Auth API
  description: API for user management, authentication, and token validation.
  version: 1.0.0
paths:
  /users/all:
    get:
      summary: Get all users
      operationId: getAllUsers
      responses:
        '200':
          description: A list of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDTO'
  /users/{id}:
    get:
      summary: Get user by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User details by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '404':
          description: User not found
    post:
      summary: Update user by ID
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDTO'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
    delete:
      summary: Delete user by ID
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
  /users/by-login/{login}:
    get:
      summary: Get user by login
      operationId: getUserByLogin
      parameters:
        - name: login
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details by login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '404':
          description: User not found
  /users:
    put:
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDTO'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'

  /auth/login:
    post:
      summary: Login to get JWT token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDTO'
      responses:
        '200':
          description: JWT token generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtDTO'

  /validation/validate:
    post:
      summary: Validate JWT token (Internal)
      description: This endpoint is internal and should not be exposed publicly.
      operationId: validateToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwtDTO'
      responses:
        '200':
          description: Validation result. If validation is successful, the token won't be null and it may be used to authorize in other services. If validation is failed, the token will be null.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtDTO'
      x-internal: true

components:
  schemas:
    JwtDTO:
      type: object
      properties:
        token:
          type: string
          description: JWT token
    LoginRequestDTO:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          description: User login
        password:
          type: string
          description: User password
    UserRequestDTO:
      type: object
      properties:
        login:
          type: string
          description: User login
        password:
          type: string
          description: User password
        name:
          type: string
          description: User name
        role:
          $ref: '#/components/schemas/UserRole'
    UserResponseDTO:
      type: object
      required:
        - id
        - login
        - role
      properties:
        id:
          type: integer
          format: int64
          description: User ID
        name:
          type: string
          description: User name
        login:
          type: string
          description: User login
        role:
          $ref: '#/components/schemas/UserRole'
    UserRole:
      type: string
      enum:
        - VIEWER
        - EDITOR
      description: Role of the user
