openapi: 3.0.3
info:
  title: Author and Book API
  description: API for managing authors and books. JWT authentication is required.
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthorRequestDTO:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
    AuthorResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "John Doe"
    BookRequestDTO:
      type: object
      properties:
        title:
          type: string
          example: "Sample Book Title"
        isbn:
          type: string
          example: "978-3-16-148410-0"
        authorId:
          type: integer
          format: int64
          example: 1
        genre:
          type: string
          example: "Fiction"
    BookResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Sample Book Title"
        isbn:
          type: string
          example: "978-3-16-148410-0"
        author:
          $ref: '#/components/schemas/AuthorResponseDTO'
        genre:
          type: string
          example: "Fiction"

security:
  - BearerAuth: []

paths:
  /authors:
    get:
      tags:
        - Author
      summary: Get all authors
      security:
        - BearerAuth: []
      operationId: getAuthors
      responses:
        '200':
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorResponseDTO'
  /author:
    put:
      tags:
        - Author
      summary: Create a new author
      security:
        - BearerAuth: []
      operationId: createAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequestDTO'
      responses:
        '201':
          description: The created author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponseDTO'
  /author/{id}:
    get:
      tags:
        - Author
      summary: Get author by ID
      security:
        - BearerAuth: [ ]
      operationId: getAuthorById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: An author object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponseDTO'
        '404':
          description: Author not found
    delete:
      tags:
        - Author
      summary: Delete an author by ID
      security:
        - BearerAuth: [ ]
      operationId: deleteAuthor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Author deleted
    post:
      tags:
        - Author
      summary: Update an author by ID
      security:
        - BearerAuth: []
      operationId: updateAuthor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequestDTO'
      responses:
        '200':
          description: The updated author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponseDTO'
  /books:
    get:
      tags:
        - Book
      summary: Get all books
      security:
        - BearerAuth: []
      operationId: getBooks
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookResponseDTO'
  /book/by-isbn/{isbn}:
    get:
      tags:
        - Book
      summary: Get book by ISBN
      security:
        - BearerAuth: []
      operationId: getBookByISBN
      parameters:
        - name: isbn
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A book object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponseDTO'
        '404':
          description: Book not found
  /book:
    put:
      tags:
        - Book
      summary: Create a new book
      security:
        - BearerAuth: []
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequestDTO'
      responses:
        '201':
          description: The created book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponseDTO'
  /book/{id}:
    get:
      tags:
        - Book
      summary: Get book by ID
      security:
        - BearerAuth: [ ]
      operationId: getBookById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A book object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponseDTO'
        '404':
          description: Book not found
    post:
      tags:
        - Book
      summary: Update a book by ID
      security:
        - BearerAuth: []
      operationId: updateBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequestDTO'
      responses:
        '200':
          description: The updated book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponseDTO'
    delete:
      tags:
        - Book
      summary: Delete a book by ID
      security:
        - BearerAuth: [ ]
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Book deleted