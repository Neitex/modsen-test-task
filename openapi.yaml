openapi: 3.0.3
info:
  title: Bookstore Service
  description: API documentation for the Bookstore Service
  version: 1.0.0
servers:
  - url: 'http://localhost:8083'
    description: Local server entry point
security:
  - bearerAuth: []
paths:
  /users/all:
    get:
      summary: Get all users
      operationId: getAllUsers
      tags:
        - User Management
      responses:
        '200':
          description: A list of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDTO'
  /users/{id}:
    get:
      summary: Get user by ID
      operationId: getUserById
      tags:
        - User Management
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '404':
          description: User not found
    patch:
      summary: Update user by ID
      operationId: updateUser
      tags:
        - User Management
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDTO'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
    delete:
      summary: Delete user by ID
      operationId: deleteUser
      tags:
        - User Management
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
  /users/by-login/{login}:
    get:
      summary: Get user by login
      operationId: getUserByLogin
      tags:
        - User Management
      parameters:
        - name: login
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '404':
          description: User not found
  /users:
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - User Management
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDTO'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'

  /auth/login:
    post:
      summary: Login to get JWT token
      operationId: login
      security: []
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDTO'
      responses:
        '200':
          description: JWT token generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtDTO'

  /books-lease/leases:
    get:
      summary: Get list of all book leases
      operationId: getBookLeases
      tags:
        - Book Lease
      responses:
        '200':
          description: A list of book leases retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookLeaseResponseDTO'
        '403':
          description: Forbidden. User does not have the required roles.
      x-security-roles:
        - EDITOR
        - VIEWER

  /books-lease/leases/{bookId}:
    get:
      summary: Get book lease by book ID
      operationId: getBookLeaseById
      tags:
        - Book Lease
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Book lease details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookLeaseResponseDTO'
        '403':
          description: Forbidden. User does not have the required roles.
        '404':
          description: Book lease not found
      x-security-roles:
        - EDITOR
        - VIEWER
  /books-lease/leases/{bookId}/lease:
    post:
      summary: Lease a book
      operationId: leaseBook
      tags:
        - Book Lease
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookLeaseRequestDTO'
      responses:
        '200':
          description: Book lease updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookLeaseResponseDTO'
        '403':
          description: Forbidden. User does not have the required roles.
        '404':
          description: Book lease not found
        '409':
          description: Book is already leased
      x-security-roles:
        - EDITOR
  /books-lease/leases/{bookId}/return:
    post:
      summary: Return a leased book
      operationId: returnBook
      tags:
        - Book Lease
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Book returned successfully
        '403':
          description: Forbidden. User does not have the required roles.
        '404':
          description: Book lease not found
        '409':
          description: Book is not leased
      x-security-roles:
        - EDITOR

  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Author
      responses:
        '200':
          description: A list of authors retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorResponseDTO'
    post:
      summary: Create a new author
      operationId: createAuthor
      tags:
        - Author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequestDTO'
      responses:
        '201':
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponseDTO'

  /authors/{id}:
    get:
      summary: Get author by ID
      operationId: getAuthorById
      tags:
        - Author
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Author details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponseDTO'
        '404':
          description: Author not found
    patch:
      summary: Update an author by ID
      operationId: updateAuthor
      tags:
        - Author
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequestDTO'
      responses:
        '200':
          description: Author updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponseDTO'
    delete:
      summary: Delete an author by ID
      operationId: deleteAuthor
      tags:
        - Author
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Author deleted successfully
        '409':
          description: Author has books associated with it. First delete those books.

  /books:
    get:
      summary: Get all books
      operationId: getBooks
      tags:
        - Book
      responses:
        '200':
          description: A list of books retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookResponseDTO'

  /books/by-isbn/{isbn}:
    get:
      summary: Get book by ISBN
      operationId: getBookByISBN
      tags:
        - Book
      parameters:
        - name: isbn
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Book details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponseDTO'
        '404':
          description: Book not found
  /books/by-author/{authorId}:
    get:
      summary: Get books by author ID
      operationId: getBooksByAuthor
      tags:
        - Book
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of books retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookResponseDTO'
        '404':
          description: Author not found
  /book:
    post:
      summary: Create a new book
      operationId: createBook
      tags:
        - Book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequestDTO'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponseDTO'

  /books/{id}:
    get:
      summary: Get book by ID
      operationId: getBookById
      tags:
        - Book
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Book details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponseDTO'
        '404':
          description: Book not found
    put:
      summary: Update a book by ID
      operationId: updateBook
      tags:
        - Book
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequestDTO'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponseDTO'
    delete:
      summary: Delete a book by ID
      operationId: deleteBook
      tags:
        - Book
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Book deleted successfully

tags:
  - name: User Management
    description: Operations related to managing users
  - name: Auth
    description: Operations related to authentication
  - name: Book Lease
    description: Operations related to book leasing
  - name: Author
    description: Operations related to authors
  - name: Book
    description: Operations related to books

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    BookLeaseRequestDTO:
      type: object
      properties:
        leaseDate:
          type: string
          format: date-time
          description: The date the book was leased.
        returnDate:
          type: string
          format: date-time
          description: The date the book is expected to be returned. Must be after the lease date.

    BookLeaseResponseDTO:
      type: object
      properties:
        bookId:
          type: integer
          format: int64
          description: The ID of the book.
        leaseDate:
          type: string
          format: date-time
          description: The date the book was leased.
        returnDate:
          type: string
          format: date-time
          description: The date the book is expected to be returned.

    JwtDTO:
      type: object
      properties:
        token:
          type: string
          description: JWT token generated after successful login

    LoginRequestDTO:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          description: User login
        password:
          type: string
          description: User password

    UserRequestDTO:
      type: object
      properties:
        login:
          type: string
          description: User login
        password:
          type: string
          description: User password
        name:
          type: string
          description: User name
        role:
          $ref: '#/components/schemas/UserRole'

    UserResponseDTO:
      type: object
      required:
        - id
        - login
        - role
      properties:
        id:
          type: integer
          format: int64
          description: User ID
        name:
          type: string
          description: User name
        login:
          type: string
          description: User login
        role:
          $ref: '#/components/schemas/UserRole'

    UserRole:
      type: string
      enum:
        - VIEWER
        - EDITOR
      description: Role of the user

    AuthorRequestDTO:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"

    AuthorResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "John Doe"

    BookRequestDTO:
      type: object
      properties:
        title:
          type: string
          example: "Sample Book Title"
        isbn:
          type: string
          example: "978-3-16-148410-0"
        description:
          type: string
          example: "Sample book description"
        authorId:
          type: integer
          format: int64
          example: 1
        genre:
          type: string
          example: "Fiction"

    BookResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Sample Book Title"
        description:
          type: string
          example: "Sample book description"
        isbn:
          type: string
          example: "978-3-16-148410-0"
        author:
          $ref: '#/components/schemas/AuthorResponseDTO'
        genre:
          type: string
          example: "Fiction"